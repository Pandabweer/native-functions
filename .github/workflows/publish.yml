name: Publish

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - run: npm config set '//registry.npmjs.org/:_authToken' '${{ secrets.NPM_TOKEN }}'
      - run: npm install -g @betty-blocks/cli
      - run: npm install @betty-blocks/jaws form-data fs-extra node-fetch@2 shelljs
      - uses: actions/checkout@v2
      - uses: actions/github-script@v6
        with:
          script: |
            const Jaws = require('@betty-blocks/jaws');
            const fetch = require('node-fetch');
            const FormData = require('form-data');
            const fs = require('fs-extra');
            const shell = require('shelljs');

            const URL = '${{ secrets.API_URL }}';
            const CONFIG = JSON.parse('${{ secrets.JAWS_SECRETS }}');

            const run = (cmd) => shell.exec(cmd, {silent: true}).stdout.trim();
            const cli = run('npm root -g') + '/@betty-blocks/cli/build';
            const jaws = Jaws.default.getInstance(CONFIG);
            const zones = CONFIG.services;

            const {
              functionDefinitions,
              stringifyDefinitions,
              zipFunctionDefinitions
            } = require(`${cli}/functions/functionDefinitions.js`);

            const functionsDir = run('pwd');
            const functions = functionDefinitions(functionsDir);
            const functionsJson = stringifyDefinitions(functions);
            const zipFile = zipFunctionDefinitions(functionsDir);

            const formData = new FormData();
            formData.append('functions', functionsJson);
            formData.append('options', JSON.stringify({compile: false}));
            formData.append('file', fs.createReadStream(zipFile));

            Object.keys(zones).forEach(zone => {
              const url = URL.replace('{ZONE}', zone) + '/artifacts/actions/native/functions';
              const jwt = jaws.sign(zone, { application_id: 'native' });

              fetch(url, {
                method: 'POST',
                body: formData,
                headers: {
                  Authorization: `Bearer ${jwt}`,
                },
              }).then(response => {
                console.log(response);
              });
            });
